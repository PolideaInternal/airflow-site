:mod:`airflow.operators.gcs_to_gcs`
===================================

.. py:module:: airflow.operators.gcs_to_gcs

.. autoapi-nested-parse::

   This module contains a Google Cloud Storage operator.



Module Contents
---------------

.. data:: WILDCARD
   :annotation: = *

   

.. py:class:: GoogleCloudStorageToGoogleCloudStorageOperator(source_bucket, source_object, destination_bucket=None, destination_object=None, move_object=False, gcp_conn_id='google_cloud_default', google_cloud_storage_conn_id=None, delegate_to=None, last_modified_time=None, *args, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Copies objects from a bucket to another, with renaming if requested.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleCloudStorageToGoogleCloudStorageOperator`

   :param source_bucket: The source Google cloud storage bucket where the
        object is. (templated)
   :type source_bucket: str
   :param source_object: The source name of the object to copy in the Google cloud
       storage bucket. (templated)
       You can use only one wildcard for objects (filenames) within your
       bucket. The wildcard can appear inside the object name or at the
       end of the object name. Appending a wildcard to the bucket name is
       unsupported.
   :type source_object: str
   :param destination_bucket: The destination Google cloud storage bucket
       where the object should be. If the destination_bucket is None, it defaults
       to source_bucket. (templated)
   :type destination_bucket: str
   :param destination_object: The destination name of the object in the
       destination Google cloud storage bucket. (templated)
       If a wildcard is supplied in the source_object argument, this is the
       prefix that will be prepended to the final destination objects' paths.
       Note that the source path's part before the wildcard will be removed;
       if it needs to be retained it should be appended to destination_object.
       For example, with prefix ``foo/*`` and destination_object ``blah/``, the
       file ``foo/baz`` will be copied to ``blah/baz``; to retain the prefix write
       the destination_object as e.g. ``blah/foo``, in which case the copied file
       will be named ``blah/foo/baz``.
   :type destination_object: str
   :param move_object: When move object is True, the object is moved instead
       of copied to the new location. This is the equivalent of a mv command
       as opposed to a cp command.
   :type move_object: bool
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud Platform.
   :type gcp_conn_id: str
   :param google_cloud_storage_conn_id: (Deprecated) The connection ID used to connect to Google Cloud
       Platform. This parameter has been deprecated. You should pass the gcp_conn_id parameter instead.
   :type google_cloud_storage_conn_id: str
   :param delegate_to: The account to impersonate, if any.
       For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :type delegate_to: str
   :param last_modified_time: When specified, the objects will be copied or moved,
       only if they were modified after last_modified_time.
       If tzinfo has not been set, UTC will be assumed.
   :type last_modified_time: datetime.datetime

   :Example:

   The following Operator would copy a single file named
   ``sales/sales-2017/january.avro`` in the ``data`` bucket to the file named
   ``copied_sales/2017/january-backup.avro`` in the ``data_backup`` bucket ::

       copy_single_file = GoogleCloudStorageToGoogleCloudStorageOperator(
           task_id='copy_single_file',
           source_bucket='data',
           source_object='sales/sales-2017/january.avro',
           destination_bucket='data_backup',
           destination_object='copied_sales/2017/january-backup.avro',
           gcp_conn_id=google_cloud_conn_id
       )

   The following Operator would copy all the Avro files from ``sales/sales-2017``
   folder (i.e. with names starting with that prefix) in ``data`` bucket to the
   ``copied_sales/2017`` folder in the ``data_backup`` bucket. ::

       copy_files = GoogleCloudStorageToGoogleCloudStorageOperator(
           task_id='copy_files',
           source_bucket='data',
           source_object='sales/sales-2017/*.avro',
           destination_bucket='data_backup',
           destination_object='copied_sales/2017/',
           gcp_conn_id=google_cloud_conn_id
       )

   The following Operator would move all the Avro files from ``sales/sales-2017``
   folder (i.e. with names starting with that prefix) in ``data`` bucket to the
   same folder in the ``data_backup`` bucket, deleting the original files in the
   process. ::

       move_files = GoogleCloudStorageToGoogleCloudStorageOperator(
           task_id='move_files',
           source_bucket='data',
           source_object='sales/sales-2017/*.avro',
           destination_bucket='data_backup',
           move_object=True,
           gcp_conn_id=google_cloud_conn_id
       )

   .. attribute:: template_fields
      :annotation: = ['source_bucket', 'source_object', 'destination_bucket', 'destination_object']

      

   .. attribute:: ui_color
      :annotation: = #f0eee4

      

   
   .. method:: execute(self, context)



   
   .. method:: _copy_single_object(self, hook, source_object, destination_object)




.. py:class:: GoogleCloudStorageSynchronizeBuckets(source_bucket:str, destination_bucket:str, source_object:Optional[str]=None, destination_object:Optional[str]=None, recursive:bool=True, delete_extra_files:bool=False, allow_overwrite:bool=False, gcp_conn_id:str='google_cloud_default', delegate_to:Optional[str]=None, *args, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Synchronizes the contents of the buckets or bucket's directories in the Google Cloud Services.

   Parameters ``source_object`` and ``destination_object`` describe the root sync directory. If they are
   not passed, the entire bucket will be synchronized. They should point to directories.

   .. note::
       The synchronization of individual files is not supported. Only entire directories can be
       synchronized.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleCloudStorageSynchronizeBuckets`

   :param source_bucket: The name of the bucket containing the source objects.
   :type source_bucket: str
   :param destination_bucket: The name of the bucket containing the destination objects.
   :type destination_bucket: str
   :param source_object: The root sync directory in the source bucket.
   :type source_object: Optional[str]
   :param destination_object: The root sync directory in the destination bucket.
   :type destination_object: Optional[str]
   :param recursive: If True, subdirectories will be considered
   :type recursive: bool
   :param allow_overwrite: if True, the files will be overwritten if a mismatched file is found.
       By default, overwriting files is not allowed
   :type allow_overwrite: bool
   :param delete_extra_files: if True, deletes additional files from the source that not found in the
       destination. By default extra files are not deleted.

       .. note::
           This option can delete data quickly if you specify the wrong source/destination combination.

   :type delete_extra_files: bool

   .. attribute:: template_fields
      :annotation: = ['source_bucket', 'destination_bucket', 'source_object', 'destination_object', 'recursive', 'delete_extra_files', 'allow_overwrite', 'gcp_conn_id', 'delegate_to']

      

   
   .. method:: execute(self, context)





:mod:`airflow.operators.google_api_to_s3_transfer`
==================================================

.. py:module:: airflow.operators.google_api_to_s3_transfer

.. autoapi-nested-parse::

   This module allows you to transfer data from any Google API endpoint into a S3 Bucket.



Module Contents
---------------

.. py:class:: GoogleApiToS3Transfer(google_api_service_name, google_api_service_version, google_api_endpoint_path, google_api_endpoint_params, s3_destination_key, *args, google_api_response_via_xcom=None, google_api_endpoint_params_via_xcom=None, google_api_endpoint_params_via_xcom_task_ids=None, google_api_pagination=False, google_api_num_retries=0, s3_overwrite=False, gcp_conn_id='google_cloud_default', delegate_to=None, aws_conn_id='aws_default', **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Basic class for transferring data from a Google API endpoint into a S3 Bucket.

   :param google_api_service_name: The specific API service that is being requested.
   :type google_api_service_name: str
   :param google_api_service_version: The version of the API that is being requested.
   :type google_api_service_version: str
   :param google_api_endpoint_path: The client libraries path to the api call's executing method.
       For example: 'analyticsreporting.reports.batchGet'

       .. note:: See https://developers.google.com/apis-explorer
           for more information on which methods are available.

   :type google_api_endpoint_path: str
   :param google_api_endpoint_params: The params to control the corresponding endpoint result.
   :type google_api_endpoint_params: dict
   :param s3_destination_key: The url where to put the data retrieved from the endpoint in S3.
   :type s3_destination_key: str
   :param google_api_response_via_xcom: Can be set to expose the google api response to xcom.
   :type google_api_response_via_xcom: str
   :param google_api_endpoint_params_via_xcom: If set to a value this value will be used as a key
       for pulling from xcom and updating the google api endpoint params.
   :type google_api_endpoint_params_via_xcom: str
   :param google_api_endpoint_params_via_xcom_task_ids: Task ids to filter xcom by.
   :type google_api_endpoint_params_via_xcom_task_ids: str or list of str
   :param google_api_pagination: If set to True Pagination will be enabled for this request
       to retrieve all data.

       .. note:: This means the response will be a list of responses.

   :type google_api_pagination: bool
   :param google_api_num_retries: Define the number of retries for the google api requests being made
       if it fails.
   :type google_api_num_retries: int
   :param s3_overwrite: Specifies whether the s3 file will be overwritten if exists.
   :type s3_overwrite: bool
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :type gcp_conn_id: string
   :param delegate_to: The account to impersonate, if any.
       For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :type delegate_to: string
   :param aws_conn_id: The connection id specifying the authentication information for the S3 Bucket.
   :type aws_conn_id: str

   .. attribute:: template_fields
      :annotation: = ['google_api_endpoint_params', 's3_destination_key']

      

   .. attribute:: template_ext
      :annotation: = []

      

   .. attribute:: ui_color
      :annotation: = #cc181e

      

   
   .. method:: execute(self, context)

      Transfers Google APIs json data to S3.

      :param context: The context that is being provided when executing.
      :type context: dict



   
   .. method:: _retrieve_data_from_google_api(self)



   
   .. method:: _load_data_to_s3(self, data)



   
   .. method:: _update_google_api_endpoint_params_via_xcom(self, task_instance)



   
   .. method:: _expose_google_api_response_via_xcom(self, task_instance, data)





:mod:`airflow.operators.subdag_operator`
========================================

.. py:module:: airflow.operators.subdag_operator


Module Contents
---------------

.. py:class:: SubDagOperator(subdag:DAG, session:Optional[Session]=None, *args, **kwargs)

   Bases: :class:`airflow.sensors.base_sensor_operator.BaseSensorOperator`

   This runs a sub dag. By convention, a sub dag's dag_id
   should be prefixed by its parent and a dot. As in `parent.child`.

   Although SubDagOperator can occupy a pool/concurrency slot,
   user can specify the mode=reschedule so that the slot will be
   released periodically to avoid potential deadlock.

   :param subdag: the DAG object to run as a subdag of the current DAG.
   :param session: sqlalchemy session

   .. attribute:: ui_color
      :annotation: = #555

      

   .. attribute:: ui_fgcolor
      :annotation: = #fff

      

   
   .. method:: _get_dagrun(self, execution_date)



   
   .. method:: _reset_dag_run_and_task_instances(self, dag_run, execution_date)

      Set the DagRun state to RUNNING and set the failed TaskInstances to None state
      for scheduler to pick up.

      :param dag_run: DAG run
      :param execution_date: Execution date
      :return: None



   
   .. method:: pre_execute(self, context)



   
   .. method:: poke(self, context)



   
   .. method:: post_execute(self, context, result=None)





:mod:`airflow.providers.google.marketing_platform.operators.display_video`
==========================================================================

.. py:module:: airflow.providers.google.marketing_platform.operators.display_video

.. autoapi-nested-parse::

   This module contains Google DisplayVideo operators.



Module Contents
---------------

.. py:class:: GoogleDisplayVideo360CreateReportOperator(body:Dict[str, Any], api_version:str='v1', gcp_conn_id:str='google_cloud_default', delegate_to:Optional[str]=None, *args, **kwargs)

   Bases: :class:`airflow.models.baseoperator.BaseOperator`

   Creates a query.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDisplayVideo360CreateReportOperator`

   .. seealso::
       Check also the official API docs:
       `https://developers.google.com/bid-manager/v1/queries/createquery`

   :param body: Report object passed to the request's body as described here:
       https://developers.google.com/bid-manager/v1/queries#resource
   :type body: Dict[str, Any]
   :param api_version: The version of the api that will be requested for example 'v3'.
   :type api_version: str
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :type gcp_conn_id: str
   :param delegate_to: The account to impersonate, if any. For this to work, the service accountmaking the
       request must have  domain-wide delegation enabled.
   :type delegate_to: str

   .. attribute:: template_fields
      :annotation: = ['body']

      

   .. attribute:: template_ext
      :annotation: = ['.json']

      

   
   .. method:: execute(self, context:Dict)




.. py:class:: GoogleDisplayVideo360DeleteReportOperator(report_id:Optional[str]=None, report_name:Optional[str]=None, api_version:str='v1', gcp_conn_id:str='google_cloud_default', delegate_to:Optional[str]=None, *args, **kwargs)

   Bases: :class:`airflow.models.baseoperator.BaseOperator`

   Deletes a stored query as well as the associated stored reports.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDisplayVideo360DeleteReportOperator`

   .. seealso::
       Check also the official API docs:
       `https://developers.google.com/bid-manager/v1/queries/deletequery`

   :param report_id: Report ID to delete.
   :type report_id: str
   :param report_name: Name of the report to delete.
   :type report_name: str
   :param api_version: The version of the api that will be requested for example 'v3'.
   :type api_version: str
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :type gcp_conn_id: str
   :param delegate_to: The account to impersonate, if any. For this to work, the service accountmaking the
       request must have  domain-wide delegation enabled.
   :type delegate_to: str

   .. attribute:: template_fields
      :annotation: = ['report_id']

      

   
   .. method:: execute(self, context:Dict)




.. py:class:: GoogleDisplayVideo360DownloadReportOperator(report_id:str, bucket_name:str, report_name:Optional[str]=None, gzip:bool=True, chunk_size:int=10 * 1024 * 1024, api_version:str='v1', gcp_conn_id:str='google_cloud_default', delegate_to:Optional[str]=None, *args, **kwargs)

   Bases: :class:`airflow.models.baseoperator.BaseOperator`

   Retrieves a stored query.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDisplayVideo360DownloadReportOperator`

   .. seealso::
       Check also the official API docs:
       `https://developers.google.com/bid-manager/v1/queries/getquery`

   :param report_id: Report ID to retrieve.
   :type report_id: str
   :param bucket_name: The bucket to upload to.
   :type bucket_name: str
   :param report_name: The report name to set when uploading the local file.
   :type report_name: str
   :param chunk_size: File will be downloaded in chunks of this many bytes.
   :type chunk_size: int
   :param gzip: Option to compress local file or file data for upload
   :type gzip: bool
   :param api_version: The version of the api that will be requested for example 'v3'.
   :type api_version: str
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :type gcp_conn_id: str
   :param delegate_to: The account to impersonate, if any. For this to work, the service accountmaking the
       request must have  domain-wide delegation enabled.
   :type delegate_to: str

   .. attribute:: template_fields
      :annotation: = ['report_id', 'bucket_name', 'report_name']

      

   
   .. method:: _resolve_file_name(self, name:str)



   
   .. staticmethod:: _set_bucket_name(name:str)



   
   .. method:: execute(self, context:Dict)




.. py:class:: GoogleDisplayVideo360RunReportOperator(report_id:str, params:Dict[str, Any], api_version:str='v1', gcp_conn_id:str='google_cloud_default', delegate_to:Optional[str]=None, *args, **kwargs)

   Bases: :class:`airflow.models.baseoperator.BaseOperator`

   Runs a stored query to generate a report.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDisplayVideo360RunReportOperator`

   .. seealso::
       Check also the official API docs:
       `https://developers.google.com/bid-manager/v1/queries/runquery`

   :param report_id: Report ID to run.
   :type report_id: str
   :param params: Parameters for running a report as described here:
       https://developers.google.com/bid-manager/v1/queries/runquery
   :type params: Dict[str, Any]
   :param api_version: The version of the api that will be requested for example 'v3'.
   :type api_version: str
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :type gcp_conn_id: str
   :param delegate_to: The account to impersonate, if any. For this to work, the service accountmaking the
       request must have  domain-wide delegation enabled.
   :type delegate_to: str

   .. attribute:: template_fields
      :annotation: = ['report_id', 'params']

      

   
   .. method:: execute(self, context:Dict)




